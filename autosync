#!/bin/sh
#
# Copyright (c) 2015 Jesco Freund
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

detect_binary() {
    local BINDIRS="/bin /usr/bin /sbin /usr/sbin /usr/local/bin /usr/local/sbin"
    local rval=""
    for i in ${BINDIRS}; do
        if [ -x "${i}/${1}" ]; then
            rval="${i}/${1}"
            break
        fi
    done
    echo $rval
}

# Detect some binaries needed
b_awk=$(detect_binary "awk")
b_basename=$(detect_binary "basename")
b_git=$(detect_binary "git")

# Internal settings
MASTER_URL="https://github.com/RootForum/zebra.git"
MASTER_REMOTE="upstream"
MASTER_BRANCH="master"
SIM=0

# Colors
if ! [ -t 1 ] || ! [ -t 2 ]; then
    USE_COLORS="no"
else
    USE_COLORS="yes"
    cyan="\033[36m"
    magenta="\033[35m"
    red="\033[1;31m"
    amber="\033[1;33m"
    green="\033[1;32m"
    white="\033[1;37m"
    normal="\033[0m"
fi

usage() {
    umsg="${white}usage: ${red}$($b_basename ${0})"
    umsg="${umsg} ${white}[${red}-N${white}] [${red}-s${white}]"
    echo -e "${umsg}

${red}Runtime Flags:
${red}    -N, --no-color      ${normal}-- Disable colors
${red}    -s, --simulate      ${normal}-- Simulation mode, printing result
${normal}"
}

info() {
    printf "${cyan}>>> Info: ${white}${1}${normal}\n"
}

warn() {
    printf "${amber}>>> Warn: ${white}${1}${normal}\n"
}

err() {
    printf "${red}>>> Fail: ${white}${1}${normal}\n"
}

prog() {
    printf "${white}>>> ${1} ${white}... "
}

msg() {
    printf "${white}>>> ${1}\n"
}

succeed() {
    printf "${green}success${normal}\n"
}

fail() {
    printf "${red}fail${normal}\n"
}


while [ "$#" -gt "0" ]; do
    case ${1} in
        -N|--no-color)
            USE_COLORS="no"
            cyan=""
            magenta=""
            red=""
            amber=""
            green=""
            white=""
            normal=""
            shift
            ;;
        -s|--sim|--simulate)
            SIM=1
            shift
            ;;
        -h|--help|help)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            break
            ;;
    esac
done

# Detect local branch
LOCAL_BRANCH=$(${b_git} branch --no-color | ${b_awk} '/^\*/ {print $2}')
info "Locally working on branch ${cyan}${LOCAL_BRANCH}"

# Test if master upstream already exists and if yes, to what URL it points
CURRENT_URL=$(${b_git} remote -v | ${b_awk} '/^upstream.*\(fetch\)$/ {print $2}')

# Remote target apparently does not exist => create it
if [ -z "${CURRENT_URL}" ]; then
    warn "Remote upstream target not configured"
    if [ "${SIM}" -ne "1" ]; then
        prog "adding remote upstream"
        {
            ${b_git} remote add ${MASTER_REMOTE} ${MASTER_URL}
        }>/dev/null 2>&1
        [ "$?" -ne "0" ] && fail && exit 1
        succeed
    else
        info "would add remote upstream now"
    fi
else
    if [ "${CURRENT_URL}" != "${MASTER_URL}" ]; then
        warn "Wrong remote upstream url:\n   expected ${cyan}${MASTER_URL}${white}\n   detected ${cyan}${CURRENT_URL}"
        if [ "${SIM}" -ne "1" ]; then
            prog "updating remote upstream url"
            {
                ${b_git} remote set-url ${MASTER_REMOTE} ${MASTER_URL}
            }>/dev/null 2>&1
            [ "$?" -ne "0" ] && fail && exit 1
            succeed
        else
            info "would update remote upstream url now"
        fi
    else
        info "Detected remote upstream ${cyan}${CURRENT_URL}"
    fi
fi

# update upstream reference
if [ "${SIM}" -ne "1" ]; then
    prog "fetching upstream"
    {
        ${b_git} fetch upstream
    }>/dev/null 2>&1
    [ "$?" -ne "0" ] && fail && exit 1
    succeed
else
    info "would fetch upstream now"
fi

# ensure local branch is checked out
if [ "${SIM}" -ne "1" ]; then
    prog "checking out local branch ${cyan}${LOCAL_BRANCH}"
    {
        ${b_git} checkout ${LOCAL_BRANCH}
    }>/dev/null 2>&1
    [ "$?" -ne "0" ] && fail && exit 1
    succeed
else
    info "would check out local branch ${cyan}${LOCAL_BRANCH}${white} now"
fi

# try merging upstream into the current branch
if [ "${SIM}" -ne "1" ]; then
    prog "merging upstream into local branch ${cyan}${LOCAL_BRANCH}"
    {
        ${b_git} merge --ff-only ${MASTER_REMOTE}/${MASTER_BRANCH}
    }>/dev/null 2>&1
    [ "$?" -ne "0" ] && fail && \
        msg "Please run 'git merge ${MASTER_REMOTE}/${MASTER_BRANCH}' manually" && \
        exit 1
    succeed
else
    info "would merge upstream into local branch ${cyan}${LOCAL_BRANCH}${white} now"
fi

info "synchronisation succeeded. You can now push to ${cyan}origin/${LOCAL_BRANCH}"
